#!/bin/bash
# =============================================================================
# DOCKER ENTRYPOINT - CURIANGO CONTROLE DE ATIVOS
# =============================================================================
# Script de inicializa√ß√£o do container Flask

set -e

echo "üöÄ Iniciando Curiango Controle de Ativos..."

# Aguardar disponibilidade do banco de dados
echo "‚è≥ Aguardando MariaDB ficar dispon√≠vel..."
while ! curl -s mysql://db:3306 >/dev/null 2>&1; do
    echo "   Banco ainda n√£o dispon√≠vel, aguardando 5s..."
    sleep 5
done
echo "‚úÖ MariaDB dispon√≠vel!"

# Verificar conectividade com o banco
echo "üîç Testando conectividade com banco de dados..."
python -c "
import pymysql
import os
import time

# Configura√ß√µes do banco via vari√°veis de ambiente
db_config = {
    'host': 'db',
    'user': 'usuario_app', 
    'password': 'senha_exemplo',
    'database': 'sistema_ativos_db',
    'port': 3306
}

max_retries = 30
for i in range(max_retries):
    try:
        conn = pymysql.connect(**db_config)
        conn.close()
        print('‚úÖ Conex√£o com banco estabelecida!')
        break
    except Exception as e:
        if i == max_retries - 1:
            print(f'‚ùå Falha na conex√£o ap√≥s {max_retries} tentativas: {e}')
            exit(1)
        print(f'   Tentativa {i+1}/{max_retries} falhou, tentando novamente em 2s...')
        time.sleep(2)
"

echo "üîß Configurando ambiente Flask..."

# Criar diret√≥rios se n√£o existirem
mkdir -p logs
mkdir -p app/static/uploads

# Configurar permiss√µes
chmod 755 logs
chmod 755 app/static/uploads

echo "üìö Aplicando migra√ß√µes de banco (se necess√°rio)..."
# Aqui poder√≠amos adicionar comandos de migra√ß√£o se necess√°rio
# python -c "from app import create_app; from app.core.db import db; app = create_app(); app.app_context().push(); db.create_all()"

echo "‚úÖ Configura√ß√£o conclu√≠da!"
echo "üåê Iniciando servidor Flask na porta 5000..."

# Executar comando passado como par√¢metro
exec "$@"